!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="http://localhost:8080/dist/",n(n.s=11)}([function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){t.exports=n(7)},function(t,e,n){var o=n(3);"string"==typeof o&&(o=[[t.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(5)(o,i);o.locals&&(t.exports=o.locals)},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,'html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:bold}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}@keyframes morph{0%{border-radius:40% 60% 60% 40% / 70% 30% 70% 30%}100%{border-radius:40% 60%}}@keyframes spin{to{transform:rotate(1turn)}}*,*:before,*:after{box-sizing:border-box}html,body{background:#002;color:white;font-family:\'M PLUS Rounded 1c\', sans-serif;overflow-x:hidden}.alert{position:fixed;left:50%;top:30%;transform:translate(-50%, 0);color:#002;font-size:1.5rem;pointer-events:none;z-index:100;padding:1em;background:rgba(255,255,255,0.8);border-radius:0.5em;white-space:nowrap}.footer{background:rgba(255,255,255,0.15);min-height:2rem;text-align:center;color:rgba(255,255,255,0.6);font-size:0.875rem;line-height:1.2rem;padding:0.4rem 0}.footer__heart{padding:0 0.125em;color:#3023AE}.footer a{text-decoration:none;color:rgba(255,255,255,0.8)}.footer a:hover{text-decoration:underline}.header{margin:0 0 1rem;text-align:center;position:relative;z-index:10}.header__links{margin:0.5em auto 0;padding-top:0.25em;max-width:26.75rem;border-top:1px solid rgba(255,255,255,0.5)}.header__links a{font-size:0.75rem;color:#f09;text-decoration:none;padding:0 0.5rem;opacity:0.8;transition:opacity 0.3s ease-out;white-space:nowrap}.header__links a svg{width:1.35em;height:1.35em;display:inline-block;fill:#fff;vertical-align:-0.3em;margin-top:-0.125rem}.header__links a:hover{opacity:1}@media screen and (min-width: 33rem){.header__links{margin-top:1em;padding-top:0.5em}.header__links a{font-size:0.875rem}}h1{text-transform:uppercase;font-size:1.5rem;color:rgba(255,255,255,0.8);line-height:1;margin:0 0 0.125em;letter-spacing:0.01em;text-align:center}@media screen and (min-height: 36.25rem) and (min-width: 25rem){h1{font-size:2rem}}.container{min-height:calc(100vh - 2rem);padding-top:2rem;display:flex;flex-direction:column;align-items:stretch;justify-content:space-evenly;overflow:hidden;position:relative}.container::before,.container::after{content:"";width:70vmax;height:70vmax;position:absolute;background:rgba(255,255,255,0.07);left:-20vmin;top:-20vmin;animation:morph 15s linear infinite alternate, spin 20s linear infinite;z-index:1;will-change:border-radius, transform;transform-origin:55% 55%;pointer-events:none}.container::after{width:70vmin;height:70vmin;left:auto;right:-10vmin;top:auto;bottom:0;animation:morph 10s linear infinite alternate, spin 26s linear infinite reverse;transform-origin:20% 20%}.generator{width:60vmin;height:60vmin;border:2px dashed rgba(255,255,255,0.4);position:relative;z-index:3;margin-left:auto;margin-right:auto}@media screen and (min-width: 31.875rem){.generator{width:50vmin;height:50vmin}}.generator__shape{width:100%;height:100%;background:#f09;background-image:linear-gradient(45deg, #3023AE 0%, #f09 100%);border-radius:30% 70% 70% 30% / 30% 30% 70% 70%;box-shadow:-10vmin 10vmin 0 rgba(255,255,255,0.07)}.generator__shape--8v{border-radius:10%;background-image:linear-gradient(-225deg, #fff 0%, rgba(255,255,255,0) 40%, rgba(0,255,255,0) 60%, cyan 100%),linear-gradient(45deg, #3023AE 0%, #f09 100%)}.generator__handle{display:block;position:absolute;cursor:pointer;width:2.5rem;height:2.5rem}.generator__handle:before{content:"";position:absolute;width:1rem;height:1rem;left:.75rem;top:.75rem;background:#fff;border:2px solid #002;transition:box-shadow 0.2s ease-out;will-change:box-shadow}.generator__handle--second:before{background:#3023AE;border:2px solid #fff}.generator__handle--third:before{background:#f09;border:2px solid #fff}.generator__handle--fourth:before{background:#0ff}.generator__handle--8v.active:before,.generator__handle--8v:hover:before{box-shadow:0 0 0 4px #FFF;border:2px solid #002}.generator__handle:not(.generator__handle--8v).active:before,.generator__handle:not(.generator__handle--8v):hover:before{background:#0ff;box-shadow:0 0 0 4px #FFF;border:2px solid #002}.generator #top{top:-1.25rem;left:30%;transform:translateX(-50%)}.generator #top.generator__handle--8v{left:10%}.generator #bottom{bottom:-1.25rem;left:30%;transform:translateX(-50%)}.generator #bottom.generator__handle--8v{left:10%}.generator #left{left:-1.25rem;top:30%;transform:translateY(-50%)}.generator #left.generator__handle--8v{top:10%}.generator #right{right:-1.25rem;top:30%;transform:translateY(-50%)}.generator #right.generator__handle--8v{top:10%}.generator #topRight{top:-1.25rem;left:90%;transform:translateX(-50%)}.generator #bottomRight{bottom:-1.25rem;left:90%;transform:translateX(-50%)}.generator #leftBottom{left:-1.25rem;top:90%;transform:translateY(-50%)}.generator #rightBottom{right:-1.25rem;top:90%;transform:translateY(-50%)}.output{width:90%;text-align:left;margin-top:1.5em;font-size:1.125rem;line-height:1.5;margin-left:auto;margin-right:auto}.output__label{flex:0 0 auto;margin-bottom:0.5em;margin-right:1em;color:rgba(255,255,255,0.9)}.output__code{display:block;font-family:\'Ubuntu Mono\', monospace;flex-grow:1;color:#002;background:#ccc;padding:0.5em 0.625em;border-radius:2px;margin-bottom:0.5em}.output__button{display:block;border-radius:2px;background:#f09;border:none;color:rgba(255,255,255,0.9);padding:0.5em 1em;font-weight:bold;width:100%;transition:background 0.3s ease-out;will-change:background;cursor:pointer}.output__button:hover{background:#3023AE}@media screen and (min-width: 30.875rem){.output{font-size:1.25rem}.output__code{border-radius:2px 0 0 2px;flex-grow:1;margin-bottom:0}.output__button{flex-shrink:1;border-radius:0 2px 2px 0;width:auto;text-transform:uppercase;letter-spacing:0.1em}}@media screen and (min-width: 43rem){.output{display:flex;justify-content:stretch;align-items:baseline;max-width:39rem}}.advanced{width:90%;max-width:39rem;text-align:left;margin:0.5em auto;position:relative;z-index:5;display:flex;justify-content:space-between;align-items:center;color:rgba(255,255,255,0.9)}@media screen and (min-width: 560px){.advanced{font-size:1.25rem}}.advanced__switch{padding:0.5em 0;flex-shrink:0;margin-bottom:0.5em}.advanced__settings{display:none}.advanced__settings.visible{display:flex;justify-content:space-between;flex-direction:column}@media screen and (min-width: 31.25rem){.advanced__settings.visible{flex-direction:row}}.advanced__check{visibility:hidden;width:0;height:0;display:block;border:none}.advanced .input-group{align-items:center;margin-left:1em;margin-bottom:0.5em;justify-content:space-between;display:flex}.advanced .input-group label{display:block;margin-right:0.5em}.advanced .input-group input[type="number"]{width:4.5rem}.advanced__check:checked+.advanced__trigger span:after{background:#f09;left:1.15em;border-radius:37% 63% 55% 45% / 25% 50% 50% 75%}.advanced__trigger{display:block;line-height:1;cursor:pointer}.advanced__trigger span{display:inline-block;width:2em;height:1em;border-radius:0.5em;background:rgba(255,255,255,0.8);vertical-align:bottom;position:relative}@media screen and (min-width: 43rem){.advanced__trigger span{margin-left:2rem}}.advanced__trigger span:after{content:"";position:absolute;width:0.7em;height:0.7em;border-radius:50% 56% 29% 70% / 50% 73% 38% 50%;background:#002;position:absolute;left:0.15em;top:0.15em;transition:left 0.3s ease-out, background 0.3s ease-out, border-radius 0.4s ease-in-out}.input-group input{border-radius:2px;border:none;background:#fff;font-family:\'Ubuntu Mono\', monospace;color:#002;padding:0.5em 0.625em}@media screen and (min-width: 30.85rem){.input-group{display:flex;align-items:stretch;flex-grow:1;margin-bottom:0}}.company-link{border:1px solid #f09;font-size:1rem;display:block;margin:0 auto auto;margin-bottom:1rem;padding:1em;width:14em;color:#fff;text-decoration:none;background:rgba(255,255,255,0.15);position:relative}@media screen and (min-width: 62rem) and (orientation: landscape){.company-link{position:absolute;top:7%;right:1rem}}@media screen and (min-width: 82rem) and (orientation: landscape){.company-link{left:75%}}\n',""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",o=t[3];if(!o)return n;if(e&&"function"==typeof btoa){var i=(a=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),r=o.sources.map((function(t){return"/*# sourceURL="+o.sourceRoot+t+" */"}));return[n].concat(r).concat([i]).join("\n")}var a;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var o={},i=0;i<this.length;i++){var r=this[i][0];"number"==typeof r&&(o[r]=!0)}for(i=0;i<t.length;i++){var a=t[i];"number"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){var o,i,r={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=o.apply(this,arguments)),i}),s=function(t,e){return e?e.querySelector(t):document.querySelector(t)},u=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var o=s.call(this,t,n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(t){o=null}e[t]=o}return e[t]}}(),c=null,l=0,d=[],f=n(6);function h(t,e){for(var n=0;n<t.length;n++){var o=t[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(y(o.parts[a],e))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(y(o.parts[a],e));r[o.id]={id:o.id,refs:1,parts:s}}}}function p(t,e){for(var n=[],o={},i=0;i<t.length;i++){var r=t[i],a=e.base?r[0]+e.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function m(t,e){var n=u(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=d[d.length-1];if("top"===t.insertAt)o?o.nextSibling?n.insertBefore(e,o.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),d.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=u(t.insertAt.before,n);n.insertBefore(e,i)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=d.indexOf(t);e>=0&&d.splice(e,1)}function b(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var o=function(){0;return n.nc}();o&&(t.attrs.nonce=o)}return v(e,t.attrs),m(t,e),e}function v(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function y(t,e){var n,o,i,r;if(e.transform&&t.css){if(!(r="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=r}if(e.singleton){var a=l++;n=c||(c=b(e)),o=_.bind(null,n,a,!1),i=_.bind(null,n,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),m(t,e),e}(e),o=E.bind(null,n,e),i=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(e),o=k.bind(null,n),i=function(){g(n)});return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=p(t,e);return h(n,e),function(t){for(var o=[],i=0;i<n.length;i++){var a=n[i];(s=r[a.id]).refs--,o.push(s)}t&&h(p(t,e),e);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete r[s.id]}}}};var w,x=(w=[],function(t,e){return w[t]=e,w.filter(Boolean).join("\n")});function _(t,e,n,o){var i=n?"":o.css;if(t.styleSheet)t.styleSheet.cssText=x(e,i);else{var r=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(r,a[e]):t.appendChild(r)}}function k(t,e){var n=e.css,o=e.media;if(o&&t.setAttribute("media",o),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function E(t,e,n){var o=n.css,i=n.sourceMap,r=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||r)&&(o=f(o)),i&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([o],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,o=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var i,r=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?t:(i=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:o+r.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")}))}},function(t,e,n){(function(t,n){!function(){"use strict";function e(t){var e=this.constructor;return this.then((function(n){return e.resolve(t()).then((function(){return n}))}),(function(n){return e.resolve(t()).then((function(){return e.reject(n)}))}))}function o(t){return!(!t||void 0===t.length)}function i(){}function r(t){if(!(this instanceof r))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],l(t,this)}function a(t,e){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,r._immediateFn((function(){var n=1===t._state?e.onFulfilled:e.onRejected;if(null!==n){var o;try{o=n(t._value)}catch(t){return void u(e.promise,t)}s(e.promise,o)}else(1===t._state?s:u)(e.promise,t._value)}))):t._deferreds.push(e)}function s(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof r)return t._state=3,t._value=e,void c(t);if("function"==typeof n)return void l(function(t,e){return function(){t.apply(e,arguments)}}(n,e),t)}t._state=1,t._value=e,c(t)}catch(e){u(t,e)}}function u(t,e){t._state=2,t._value=e,c(t)}function c(t){2===t._state&&0===t._deferreds.length&&r._immediateFn((function(){t._handled||r._unhandledRejectionFn(t._value)}));for(var e=0,n=t._deferreds.length;n>e;e++)a(t,t._deferreds[e]);t._deferreds=null}function l(t,e){var n=!1;try{t((function(t){n||(n=!0,s(e,t))}),(function(t){n||(n=!0,u(e,t))}))}catch(t){if(n)return;n=!0,u(e,t)}}var d=setTimeout;r.prototype.catch=function(t){return this.then(null,t)},r.prototype.then=function(t,e){var n=new this.constructor(i);return a(this,new function(t,e,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=n}(t,e,n)),n},r.prototype.finally=e,r.all=function(t){return new r((function(e,n){function i(t,o){try{if(o&&("object"==typeof o||"function"==typeof o)){var s=o.then;if("function"==typeof s)return void s.call(o,(function(e){i(t,e)}),n)}r[t]=o,0==--a&&e(r)}catch(t){n(t)}}if(!o(t))return n(new TypeError("Promise.all accepts an array"));var r=Array.prototype.slice.call(t);if(0===r.length)return e([]);for(var a=r.length,s=0;r.length>s;s++)i(s,r[s])}))},r.resolve=function(t){return t&&"object"==typeof t&&t.constructor===r?t:new r((function(e){e(t)}))},r.reject=function(t){return new r((function(e,n){n(t)}))},r.race=function(t){return new r((function(e,n){if(!o(t))return n(new TypeError("Promise.race accepts an array"));for(var i=0,a=t.length;a>i;i++)r.resolve(t[i]).then(e,n)}))},r._immediateFn="function"==typeof t&&function(e){t(e)}||function(t){d(t,0)},r._unhandledRejectionFn=function(t){void 0!==console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)};var f=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw Error("unable to locate global object")}();"Promise"in f?f.Promise.prototype.finally||(f.Promise.prototype.finally=e):f.Promise=r}(),function(t){"use strict";function e(t,e,n,o){return new(n||(n=Promise))((function(i,r){function a(t){try{u(o.next(t))}catch(t){r(t)}}function s(t){try{u(o.throw(t))}catch(t){r(t)}}function u(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(a,s)}u((o=o.apply(t,e||[])).next())}))}function n(t,e){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===r[0]||2===r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=e.call(t,a)}catch(t){r=[6,t],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}var o=["text/plain","text/html"],i=function(){(console.warn||console.log).call(arguments)}.bind(console,"[clipboard-polyfill]"),r=!0,a=function(){function t(){this.m={}}return t.prototype.setData=function(t,e){r&&-1===o.indexOf(t)&&i("Unknown data type: "+t,"Call clipboard.suppressWarnings() to suppress this warning."),this.m[t]=e},t.prototype.getData=function(t){return this.m[t]},t.prototype.forEach=function(t){for(var e in this.m)t(this.m[e],e)},t}(),s=function(t){},u=!0,c=function(){(console.warn||console.log).apply(console,arguments)}.bind("[clipboard-polyfill]"),l="text/plain";function d(t){s=t}function f(){u=!1,r=!1}function h(t){return e(this,void 0,void 0,(function(){var e;return n(this,(function(n){if(u&&!t.getData(l)&&c("clipboard.write() was called without a `text/plain` data type. On some platforms, this may result in an empty clipboard. Call clipboard.suppressWarnings() to suppress this warning."),I()){if(function(t){var e=t.getData(l);if(void 0!==e)return window.clipboardData.setData("Text",e);throw new Error("No `text/plain` value was specified.")}(t))return[2];throw new Error("Copying failed, possibly because the user rejected it.")}if(x(t))return s("regular execCopy worked"),[2];if(navigator.userAgent.indexOf("Edge")>-1)return s('UA "Edge" => assuming success'),[2];if(_(document.body,t))return s("copyUsingTempSelection worked"),[2];if(function(t){var e=document.createElement("div");e.setAttribute("style","-webkit-user-select: text !important"),e.textContent="temporary element",document.body.appendChild(e);var n=_(e,t);return document.body.removeChild(e),n}(t))return s("copyUsingTempElem worked"),[2];if(void 0!==(e=t.getData(l))&&function(t){s("copyTextUsingDOM");var e=document.createElement("div");e.setAttribute("style","-webkit-user-select: text !important");var n=e;e.attachShadow&&(s("Using shadow DOM."),n=e.attachShadow({mode:"open"}));var o=document.createElement("span");o.innerText=t,n.appendChild(o),document.body.appendChild(e),k(o);var i=document.execCommand("copy");return E(),document.body.removeChild(e),i}(e))return s("copyTextUsingDOM worked"),[2];throw new Error("Copy command failed.")}))}))}function p(t){return e(this,void 0,void 0,(function(){return n(this,(function(e){return navigator.clipboard&&navigator.clipboard.writeText?(s("Using `navigator.clipboard.writeText()`."),[2,navigator.clipboard.writeText(t)]):[2,h(T(t))]}))}))}function m(){return e(this,void 0,void 0,(function(){var t;return n(this,(function(e){switch(e.label){case 0:return t=T,[4,g()];case 1:return[2,t.apply(void 0,[e.sent()])]}}))}))}function g(){return e(this,void 0,void 0,(function(){return n(this,(function(t){if(navigator.clipboard&&navigator.clipboard.readText)return s("Using `navigator.clipboard.readText()`."),[2,navigator.clipboard.readText()];if(I())return s("Reading text using IE strategy."),[2,R()];throw new Error("Read is not supported in your browser.")}))}))}var b=!1;function v(){b||(u&&c('The deprecated default object of `clipboard-polyfill` was called. Please switch to `import * as clipboard from "clipboard-polyfill"` and see https://github.com/lgarron/clipboard-polyfill/issues/101 for more info.'),b=!0)}var y={DT:a,setDebugLog:function(t){return v(),d(t)},suppressWarnings:function(){return v(),f()},write:function(t){return e(this,void 0,void 0,(function(){return n(this,(function(e){return v(),[2,h(t)]}))}))},writeText:function(t){return e(this,void 0,void 0,(function(){return n(this,(function(e){return v(),[2,p(t)]}))}))},read:function(){return e(this,void 0,void 0,(function(){return n(this,(function(t){return v(),[2,m()]}))}))},readText:function(){return e(this,void 0,void 0,(function(){return n(this,(function(t){return v(),[2,g()]}))}))}},w=function(){this.success=!1};function x(t){var e=new w,n=function(t,e,n){s("listener called"),t.success=!0,e.forEach((function(e,o){var i=n.clipboardData;i.setData(o,e),o===l&&i.getData(o)!==e&&(s("setting text/plain failed"),t.success=!1)})),n.preventDefault()}.bind(this,e,t);document.addEventListener("copy",n);try{document.execCommand("copy")}finally{document.removeEventListener("copy",n)}return e.success}function _(t,e){k(t);var n=x(e);return E(),n}function k(t){var e=document.getSelection();if(e){var n=document.createRange();n.selectNodeContents(t),e.removeAllRanges(),e.addRange(n)}}function E(){var t=document.getSelection();t&&t.removeAllRanges()}function T(t){var e=new a;return e.setData(l,t),e}function I(){return"undefined"==typeof ClipboardEvent&&void 0!==window.clipboardData&&void 0!==window.clipboardData.setData}function R(){return e(this,void 0,void 0,(function(){var t;return n(this,(function(e){if(""===(t=window.clipboardData.getData("Text")))throw new Error("Empty clipboard or could not read plain text from clipboard");return[2,t]}))}))}t.DT=a,t.default=y,t.read=m,t.readText=g,t.setDebugLog=d,t.suppressWarnings=f,t.write=h,t.writeText=p,Object.defineProperty(t,"__esModule",{value:!0})}(e)}).call(this,n(8).setImmediate,n(0))},function(t,e,n){(function(t){var o=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function r(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new r(i.call(setTimeout,o,arguments),clearTimeout)},e.setInterval=function(){return new r(i.call(setInterval,o,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(o,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(9),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(0))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var o,i,r,a,s,u=1,c={},l=!1,d=t.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(t);f=f&&f.setTimeout?f:t,"[object process]"==={}.toString.call(t.process)?o=function(t){e.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((r=new MessageChannel).port1.onmessage=function(t){p(t.data)},o=function(t){r.port2.postMessage(t)}):d&&"onreadystatechange"in d.createElement("script")?(i=d.documentElement,o=function(t){var e=d.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):o=function(t){setTimeout(p,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&p(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),o=function(e){t.postMessage(a+e,"*")}),f.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return c[u]=i,o(u),u++},f.clearImmediate=h}function h(t){delete c[t]}function p(t){if(l)setTimeout(p,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(void 0,n)}}(e)}finally{h(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(0),n(10))},function(t,e){var n,o,i=t.exports={};function r(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(t){n=r}try{o="function"==typeof clearTimeout?clearTimeout:a}catch(t){o=a}}();var u,c=[],l=!1,d=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):d=-1,c.length&&h())}function h(){if(!l){var t=s(f);l=!0;for(var e=c.length;e;){for(u=c,c=[];++d<e;)u&&u[d].run();d=-1,e=c.length}u=null,l=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function m(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||l||s(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";n.r(e);n(2);var o=n(1),i=n.n(o);function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var s=function(){function t(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=n.shapeElemId,i=void 0===o?"shape":o,a=n.generatorElemId,s=void 0===a?"code":a,u=n.copyCodeId,c=void 0===u?"copy":u,l=n.copiedCodeId,d=void 0===l?"clipboard_copied":l,f=n.boxContainerId,h=void 0===f?"box":f,p=n.widthInputId,m=void 0===p?"width":p,g=n.heightInputId,b=void 0===g?"height":g,v=n.enableAdvancedId,y=void 0===v?"enable-advanced":v,w=n.initState,x=void 0===w?null:w,_=n.moveableElems;r(this,t),this.generatorElem=document.getElementById(s),this.shapeElem=document.getElementById(i),this.copiedCode=document.getElementById(d),this.boxContainer=document.getElementById(h),this.widthInput=document.getElementById(m),this.heightInput=document.getElementById(b),this.widthInput.onchange=function(){e.updateState(e.widthInput.value,"width")},this.heightInput.onchange=function(){e.updateState(e.heightInput.value,"height")},this.enableAdvanced=document.getElementById(y),this.enableAdvanced.onclick=this.enableAdvancedOnClick.bind(this),this.initState(x),this.initAdvanced(),this.handles=this.initHandles(_),document.getElementById(c).onclick=this.setClipboard.bind(this)}var e,n,o;return e=t,o=[{key:"loadUrlParams",value:function(t){var e,n=/#(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100)-(?:(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100))?-(\d*).(\d*)/gm,o=["left","top","right","bottom","leftBottom","topRight","rightBottom","bottomRight","height","width"],i={};if(!n.test(t))return null;for(n.lastIndex=0;null!==(e=n.exec(t));)e.forEach((function(t,e){0!=e&&(i[o[e-1]]=t)}));return i}}],(n=[{key:"initHandles",value:function(t){throw new Error("You have to implement the method initHandles!")}},{key:"updateBorderRadius",value:function(){throw new Error("You have to implement the method updateBorderRadius!")}},{key:"initState",value:function(t){throw new Error("You have to implement the method initState!")}},{key:"initAdvanced",value:function(){""!==this.state.width&&""!==this.state.height&&(this.enableAdvanced.checked=!0,document.getElementById("dimension-input").classList.add("visible"))}},{key:"enableAdvancedOnClick",value:function(t){this.enableAdvanced.checked?(document.getElementById("dimension-input").classList.add("visible"),this.state.width=this.boxContainer.offsetWidth,this.state.height=this.boxContainer.offsetHeight,this.updateUI()):(document.getElementById("dimension-input").classList.remove("visible"),this.updateState("","width"),this.updateState("","height"),this.boxContainer.style.height="",this.boxContainer.style.width="")}},{key:"setClipboard",value:function(){var t=this;i.a.writeText(this.generatorElem.innerHTML).then((function(){t.copiedCode.innerHTML='<div class="alert">Copied to clipboard 👍</div>'}),(function(){t.copiedCode.innerHTML='<div class="alert">💔 Not Supported</div>'})),setTimeout((function(){t.copiedCode.innerHTML=""}),2e3)}},{key:"setUrlHash",value:function(t){window.history&&"pushState"in window.history?history.pushState(null,null,"#"+t):window.location.hash=t}},{key:"updateState",value:function(t,e){this.state[e]=t,this.updateUI()}},{key:"updateUI",value:function(){this.updateBorderRadius(),this.updateBox()}},{key:"updateBox",value:function(){if(this.enableAdvanced.checked){var t=""==this.state.height?"":this.state.height+"px",e=""==this.state.width?"":this.state.width+"px";this.boxContainer.style.height=t,this.boxContainer.style.width=e,this.heightInput.value=this.state.height,this.widthInput.value=this.state.width}}},{key:"saveUrlParams",value:function(){throw new Error("You have to implement the method saveUrlParams!")}}])&&a(e.prototype,n),o&&a(e,o),t}();function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var l=function(){function t(e,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"x",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:30,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){};u(this,t),this.axis=o,this.pos=i,this.elem=e,this.onChange=n,this.onDragEnd=r,this.elem.onmousedown=this.dragMouseDown.bind(this),this.elem.ontouchstart=this.dragMouseDown.bind(this),this.setInitPos(i),this.onChange(this.pos,this.elem.id)}var e,n,o;return e=t,(n=[{key:"dragMouseDown",value:function(t){(t=t||window.event).preventDefault(),this.currentSpan=t.target,this.currentSpan.classList.add("active"),document.onmouseup=this.closeDragElement.bind(this),document.ontouchend=this.closeDragElement.bind(this),document.onmousemove=this.elementDrag.bind(this),document.ontouchmove=this.elementDrag.bind(this)}},{key:"elementDrag",value:function(t){if(t=t||window.event,"undefined"!=typeof TouchEvent&&t instanceof TouchEvent){var e=t.changedTouches[0];this.setPos(e.clientX,e.clientY)}else this.setPos(t.clientX,t.clientY)}},{key:"setInitPos",value:function(t){"x"==this.axis?this.elem.style.left=t+"%":this.elem.style.top=t+"%"}},{key:"setPos",value:function(t,e){var n=this.elem.parentNode.getBoundingClientRect();"x"==this.axis?(this.pos=this.valBetween((100*(t-5-n.left).toFixed(0)/n.width).toFixed(0),0,100),this.elem.style.left=this.pos+"%"):(this.pos=this.valBetween((100*(e-5-n.top).toFixed(0)/n.height).toFixed(0),0,100),this.elem.style.top=this.pos+"%"),this.onChange(this.pos,this.elem.id)}},{key:"closeDragElement",value:function(){this.currentSpan.classList.remove("active"),this.onDragEnd(),document.onmouseup=null,document.onmousemove=null,document.ontouchend=null,document.ontouchmove=null}},{key:"valBetween",value:function(t,e,n){return Math.min(n,Math.max(e,t))}}])&&c(e.prototype,n),o&&c(e,o),t}();function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function p(t,e){return!e||"object"!==d(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function m(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function g(t){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function b(t,e){return(b=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&b(t,e)}(a,t);var e,n,o,i,r=(e=a,function(){var t,n=g(e);if(m()){var o=g(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return p(this,t)});function a(){return f(this,a),r.apply(this,arguments)}return n=a,(o=[{key:"initState",value:function(t){this.state=null==t?{left:10,right:10,top:10,bottom:10,leftBottom:90,rightBottom:90,topRight:90,bottomRight:90,width:"",height:"",advancedMode:!1}:t}},{key:"initHandles",value:function(t){return{left:new l(t.left,this.updateState.bind(this),"y",this.state.left,this.saveUrlParams.bind(this)),right:new l(t.right,this.updateState.bind(this),"y",this.state.right,this.saveUrlParams.bind(this)),top:new l(t.top,this.updateState.bind(this),"x",this.state.top,this.saveUrlParams.bind(this)),bottom:new l(t.bottom,this.updateState.bind(this),"x",this.state.bottom,this.saveUrlParams.bind(this)),leftBottom:new l(t.leftBottom,this.updateState.bind(this),"y",this.state.leftBottom,this.saveUrlParams.bind(this)),rightBottom:new l(t.rightBottom,this.updateState.bind(this),"y",this.state.rightBottom,this.saveUrlParams.bind(this)),topRight:new l(t.topRight,this.updateState.bind(this),"x",this.state.topRight,this.saveUrlParams.bind(this)),bottomRight:new l(t.bottomRight,this.updateState.bind(this),"x",this.state.bottomRight,this.saveUrlParams.bind(this))}}},{key:"updateBorderRadius",value:function(){var t=this.state.top+"% ";t+=100-this.state.topRight+"% ",t+=100-this.state.bottomRight+"% ",t+=this.state.bottom+"% / ",t+=this.state.left+"% ",t+=this.state.right+"% ",t+=100-this.state.rightBottom+"% ",t+=100-this.state.leftBottom+"% ",this.shapeElem.style["border-radius"]=t,this.generatorElem.innerHTML=t}},{key:"saveUrlParams",value:function(){var t=this.state,e=t.left,n=t.top,o=t.right,i=t.bottom,r=t.width,a=t.height,s=t.leftBottom,u=t.topRight,c=t.rightBottom,l=t.bottomRight,d="".concat(e,".").concat(n,".").concat(o,".").concat(i,"-").concat(s,".").concat(u,".").concat(c,".").concat(l,"-").concat(a,".").concat(r);this.setUrlHash(d)}}])&&h(n.prototype,o),i&&h(n,i),a}(s),y={left:document.getElementById("left"),right:document.getElementById("right"),bottom:document.getElementById("bottom"),top:document.getElementById("top"),leftBottom:document.getElementById("leftBottom"),rightBottom:document.getElementById("rightBottom"),bottomRight:document.getElementById("bottomRight"),topRight:document.getElementById("topRight")},w=v.loadUrlParams(window.location.href);new v({moveableElems:y,initState:w})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,