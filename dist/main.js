!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="http://localhost:8080/dist/",n(n.s=11)}([function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){e.exports=n(7)},function(e,t,n){var o=n(3);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(5)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,'html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button{height:auto}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:bold}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}@keyframes morph{0%{border-radius:40% 60% 60% 40% / 70% 30% 70% 30%}100%{border-radius:40% 60%}}@keyframes spin{to{transform:rotate(1turn)}}*,*:before,*:after{box-sizing:border-box}html,body{background:#002;color:white;font-family:\'M PLUS Rounded 1c\', sans-serif;overflow-x:hidden}.alert{position:fixed;left:50%;top:30%;transform:translate(-50%, 0);color:#002;font-size:1.5rem;pointer-events:none;z-index:100;padding:1em;background:rgba(255,255,255,0.8);border-radius:0.5em;white-space:nowrap}.footer{background:rgba(255,255,255,0.15);min-height:2rem;text-align:center;color:rgba(255,255,255,0.6);font-size:0.875rem;line-height:1.2rem;padding:0.4rem 0}.footer__heart{padding:0 0.125em;color:#3023AE}.footer a{text-decoration:none;color:rgba(255,255,255,0.8)}.footer a:hover{text-decoration:underline}.header{margin:0 0 1rem;text-align:center;position:relative;z-index:10}.header__links{margin:0.5em auto 0;padding-top:0.25em;max-width:26.75rem;border-top:1px solid rgba(255,255,255,0.5)}.header__links a{font-size:0.75rem;color:#f09;text-decoration:none;padding:0 0.5rem;opacity:0.8;transition:opacity 0.3s ease-out;white-space:nowrap}.header__links a svg{width:1.35em;height:1.35em;display:inline-block;fill:#fff;vertical-align:-0.3em;margin-top:-0.125rem}.header__links a:hover{opacity:1}@media screen and (min-width: 33rem){.header__links{margin-top:1em;padding-top:0.5em}.header__links a{font-size:0.875rem}}h1{text-transform:uppercase;font-size:1.5rem;color:rgba(255,255,255,0.8);line-height:1;margin:0 0 0.125em;letter-spacing:0.01em;text-align:center}@media screen and (min-height: 36.25rem) and (min-width: 25rem){h1{font-size:2rem}}.container{min-height:calc(100vh - 2rem);padding-top:2rem;display:flex;flex-direction:column;align-items:stretch;justify-content:space-evenly;overflow:hidden;position:relative}.container::before,.container::after{content:"";width:70vmax;height:70vmax;position:absolute;background:rgba(255,255,255,0.07);left:-20vmin;top:-20vmin;animation:morph 15s linear infinite alternate, spin 20s linear infinite;z-index:1;will-change:border-radius, transform;transform-origin:55% 55%;pointer-events:none}.container::after{width:70vmin;height:70vmin;left:auto;right:-10vmin;top:auto;bottom:0;animation:morph 10s linear infinite alternate, spin 26s linear infinite reverse;transform-origin:20% 20%}.generator{width:60vmin;height:60vmin;border:2px dashed rgba(255,255,255,0.4);position:relative;z-index:3;margin-left:auto;margin-right:auto}@media screen and (min-width: 31.875rem){.generator{width:50vmin;height:50vmin}}.generator__shape{width:100%;height:100%;background:#f09;background-image:linear-gradient(45deg, #3023AE 0%, #f09 100%);border-radius:30% 70% 70% 30% / 30% 30% 70% 70%;box-shadow:-10vmin 10vmin 0 rgba(255,255,255,0.07)}.generator__shape--8v{border-radius:10%;background-image:linear-gradient(-225deg, #fff 0%, rgba(255,255,255,0) 40%, rgba(0,255,255,0) 60%, cyan 100%),linear-gradient(45deg, #3023AE 0%, #f09 100%)}.generator__handle{display:block;position:absolute;cursor:pointer;width:2.5rem;height:2.5rem}.generator__handle:before{content:"";position:absolute;width:1rem;height:1rem;left:.75rem;top:.75rem;background:#fff;border:2px solid #002;transition:box-shadow 0.2s ease-out;will-change:box-shadow}.generator__handle--second:before{background:#3023AE;border:2px solid #fff}.generator__handle--third:before{background:#f09;border:2px solid #fff}.generator__handle--fourth:before{background:#0ff}.generator__handle--8v.active:before,.generator__handle--8v:hover:before{box-shadow:0 0 0 4px #FFF;border:2px solid #002}.generator__handle:not(.generator__handle--8v).active:before,.generator__handle:not(.generator__handle--8v):hover:before{background:#0ff;box-shadow:0 0 0 4px #FFF;border:2px solid #002}.generator #top{top:-1.25rem;left:30%;transform:translateX(-50%)}.generator #top.generator__handle--8v{left:10%}.generator #bottom{bottom:-1.25rem;left:30%;transform:translateX(-50%)}.generator #bottom.generator__handle--8v{left:10%}.generator #left{left:-1.25rem;top:30%;transform:translateY(-50%)}.generator #left.generator__handle--8v{top:10%}.generator #right{right:-1.25rem;top:30%;transform:translateY(-50%)}.generator #right.generator__handle--8v{top:10%}.generator #topRight{top:-1.25rem;left:90%;transform:translateX(-50%)}.generator #bottomRight{bottom:-1.25rem;left:90%;transform:translateX(-50%)}.generator #leftBottom{left:-1.25rem;top:90%;transform:translateY(-50%)}.generator #rightBottom{right:-1.25rem;top:90%;transform:translateY(-50%)}.output{width:90%;text-align:left;margin-top:1.5em;font-size:1.125rem;line-height:1.5;margin-left:auto;margin-right:auto}.output__label{flex:0 0 auto;margin-bottom:0.5em;margin-right:1em;color:rgba(255,255,255,0.9)}.output__code{display:block;font-family:\'Ubuntu Mono\', monospace;flex-grow:1;color:#002;background:#ccc;padding:0.5em 0.625em;border-radius:2px;margin-bottom:0.5em}.output__button{display:block;border-radius:2px;background:#f09;border:none;color:rgba(255,255,255,0.9);padding:0.5em 1em;font-weight:bold;width:100%;transition:background 0.3s ease-out;will-change:background;cursor:pointer}.output__button:hover{background:#3023AE}@media screen and (min-width: 30.875rem){.output{font-size:1.25rem}.output__code{border-radius:2px 0 0 2px;flex-grow:1;margin-bottom:0}.output__button{flex-shrink:1;border-radius:0 2px 2px 0;width:auto;text-transform:uppercase;letter-spacing:0.1em}}@media screen and (min-width: 43rem){.output{display:flex;justify-content:stretch;align-items:baseline;max-width:39rem}}.advanced{width:90%;max-width:39rem;text-align:left;margin:0.5em auto;position:relative;z-index:5;display:flex;justify-content:space-between;align-items:center;color:rgba(255,255,255,0.9)}@media screen and (min-width: 560px){.advanced{font-size:1.25rem}}.advanced__switch{padding:0.5em 0;flex-shrink:0;margin-bottom:0.5em}.advanced__settings{display:none}.advanced__settings.visible{display:flex;justify-content:space-between;flex-direction:column}@media screen and (min-width: 31.25rem){.advanced__settings.visible{flex-direction:row}}.advanced__check{visibility:hidden;width:0;height:0;display:block;border:none}.advanced .input-group{align-items:center;margin-left:1em;margin-bottom:0.5em;justify-content:space-between;display:flex}.advanced .input-group label{display:block;margin-right:0.5em}.advanced .input-group input[type="number"]{width:4.5rem}.advanced__check:checked+.advanced__trigger span:after{background:#f09;left:1.15em;border-radius:37% 63% 55% 45% / 25% 50% 50% 75%}.advanced__trigger{display:block;line-height:1;cursor:pointer}.advanced__trigger span{display:inline-block;width:2em;height:1em;border-radius:0.5em;background:rgba(255,255,255,0.8);vertical-align:bottom;position:relative}@media screen and (min-width: 43rem){.advanced__trigger span{margin-left:2rem}}.advanced__trigger span:after{content:"";position:absolute;width:0.7em;height:0.7em;border-radius:50% 56% 29% 70% / 50% 73% 38% 50%;background:#002;position:absolute;left:0.15em;top:0.15em;transition:left 0.3s ease-out, background 0.3s ease-out, border-radius 0.4s ease-in-out}.input-group input{border-radius:2px;border:none;background:#fff;font-family:\'Ubuntu Mono\', monospace;color:#002;padding:0.5em 0.625em}@media screen and (min-width: 30.85rem){.input-group{display:flex;align-items:stretch;flex-grow:1;margin-bottom:0}}.company-link{z-index:200;width:14em;position:relative;display:flex;flex-direction:column;padding:0.5em 1em 0.75em;margin:2em auto;margin-bottom:1rem;background:rgba(255,255,255,0.15);border:1px solid #f09;color:#fff;font-size:1rem;text-align:center;text-decoration:none}.company-link:hover{background:rgba(255,255,255,0.3)}.company-link__label{margin-bottom:0.5em}@media screen and (min-width: 62rem) and (orientation: landscape){.company-link{margin:0;position:absolute;top:7%;right:1rem}}@media screen and (min-width: 82rem) and (orientation: landscape){.company-link{left:75%}}\n',""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(a=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=o.sources.map((function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"}));return[n].concat(i).concat([r]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var o,r,i={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),s=function(e,t){return t?t.querySelector(e):document.querySelector(e)},u=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var o=s.call(this,e,n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}}(),c=null,l=0,d=[],f=n(6);function h(e,t){for(var n=0;n<e.length;n++){var o=e[n],r=i[o.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](o.parts[a]);for(;a<o.parts.length;a++)r.parts.push(y(o.parts[a],t))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(y(o.parts[a],t));i[o.id]={id:o.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function m(e,t){var n=u(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=d[d.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=u(e.insertAt.before,n);n.insertBefore(t,r)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function b(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var o=function(){0;return n.nc}();o&&(e.attrs.nonce=o)}return v(t,e.attrs),m(e,t),t}function v(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function y(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=l++;n=c||(c=b(t)),o=_.bind(null,n,a,!1),r=_.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),m(e,t),t}(t),o=E.bind(null,n,t),r=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(t),o=k.bind(null,n),r=function(){g(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return h(n,t),function(e){for(var o=[],r=0;r<n.length;r++){var a=n[r];(s=i[a.id]).refs--,o.push(s)}e&&h(p(e,t),t);for(r=0;r<o.length;r++){var s;if(0===(s=o[r]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var w,x=(w=[],function(e,t){return w[e]=t,w.filter(Boolean).join("\n")});function _(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=x(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function k(e,t){var n=t.css,o=t.media;if(o&&e.setAttribute("media",o),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function E(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=f(o)),r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")}))}},function(e,t,n){(function(e,n){!function(){"use strict";function t(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))}function o(e){return!(!e||void 0===e.length)}function r(){}function i(e){if(!(this instanceof i))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],l(e,this)}function a(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,i._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var o;try{o=n(e._value)}catch(e){return void u(t.promise,e)}s(t.promise,o)}else(1===e._state?s:u)(t.promise,e._value)}))):e._deferreds.push(t)}function s(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof i)return e._state=3,e._value=t,void c(e);if("function"==typeof n)return void l(function(e,t){return function(){e.apply(t,arguments)}}(n,t),e)}e._state=1,e._value=t,c(e)}catch(t){u(e,t)}}function u(e,t){e._state=2,e._value=t,c(e)}function c(e){2===e._state&&0===e._deferreds.length&&i._immediateFn((function(){e._handled||i._unhandledRejectionFn(e._value)}));for(var t=0,n=e._deferreds.length;n>t;t++)a(e,e._deferreds[t]);e._deferreds=null}function l(e,t){var n=!1;try{e((function(e){n||(n=!0,s(t,e))}),(function(e){n||(n=!0,u(t,e))}))}catch(e){if(n)return;n=!0,u(t,e)}}var d=setTimeout;i.prototype.catch=function(e){return this.then(null,e)},i.prototype.then=function(e,t){var n=new this.constructor(r);return a(this,new function(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}(e,t,n)),n},i.prototype.finally=t,i.all=function(e){return new i((function(t,n){function r(e,o){try{if(o&&("object"==typeof o||"function"==typeof o)){var s=o.then;if("function"==typeof s)return void s.call(o,(function(t){r(e,t)}),n)}i[e]=o,0==--a&&t(i)}catch(e){n(e)}}if(!o(e))return n(new TypeError("Promise.all accepts an array"));var i=Array.prototype.slice.call(e);if(0===i.length)return t([]);for(var a=i.length,s=0;i.length>s;s++)r(s,i[s])}))},i.resolve=function(e){return e&&"object"==typeof e&&e.constructor===i?e:new i((function(t){t(e)}))},i.reject=function(e){return new i((function(t,n){n(e)}))},i.race=function(e){return new i((function(t,n){if(!o(e))return n(new TypeError("Promise.race accepts an array"));for(var r=0,a=e.length;a>r;r++)i.resolve(e[r]).then(t,n)}))},i._immediateFn="function"==typeof e&&function(t){e(t)}||function(e){d(e,0)},i._unhandledRejectionFn=function(e){void 0!==console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};var f=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw Error("unable to locate global object")}();"Promise"in f?f.Promise.prototype.finally||(f.Promise.prototype.finally=t):f.Promise=i}(),function(e){"use strict";function t(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function s(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n((function(t){t(e.value)})).then(a,s)}u((o=o.apply(e,t||[])).next())}))}function n(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var o=["text/plain","text/html"],r=function(){(console.warn||console.log).call(arguments)}.bind(console,"[clipboard-polyfill]"),i=!0,a=function(){function e(){this.m={}}return e.prototype.setData=function(e,t){i&&-1===o.indexOf(e)&&r("Unknown data type: "+e,"Call clipboard.suppressWarnings() to suppress this warning."),this.m[e]=t},e.prototype.getData=function(e){return this.m[e]},e.prototype.forEach=function(e){for(var t in this.m)e(this.m[t],t)},e}(),s=function(e){},u=!0,c=function(){(console.warn||console.log).apply(console,arguments)}.bind("[clipboard-polyfill]"),l="text/plain";function d(e){s=e}function f(){u=!1,i=!1}function h(e){return t(this,void 0,void 0,(function(){var t;return n(this,(function(n){if(u&&!e.getData(l)&&c("clipboard.write() was called without a `text/plain` data type. On some platforms, this may result in an empty clipboard. Call clipboard.suppressWarnings() to suppress this warning."),I()){if(function(e){var t=e.getData(l);if(void 0!==t)return window.clipboardData.setData("Text",t);throw new Error("No `text/plain` value was specified.")}(e))return[2];throw new Error("Copying failed, possibly because the user rejected it.")}if(x(e))return s("regular execCopy worked"),[2];if(navigator.userAgent.indexOf("Edge")>-1)return s('UA "Edge" => assuming success'),[2];if(_(document.body,e))return s("copyUsingTempSelection worked"),[2];if(function(e){var t=document.createElement("div");t.setAttribute("style","-webkit-user-select: text !important"),t.textContent="temporary element",document.body.appendChild(t);var n=_(t,e);return document.body.removeChild(t),n}(e))return s("copyUsingTempElem worked"),[2];if(void 0!==(t=e.getData(l))&&function(e){s("copyTextUsingDOM");var t=document.createElement("div");t.setAttribute("style","-webkit-user-select: text !important");var n=t;t.attachShadow&&(s("Using shadow DOM."),n=t.attachShadow({mode:"open"}));var o=document.createElement("span");o.innerText=e,n.appendChild(o),document.body.appendChild(t),k(o);var r=document.execCommand("copy");return E(),document.body.removeChild(t),r}(t))return s("copyTextUsingDOM worked"),[2];throw new Error("Copy command failed.")}))}))}function p(e){return t(this,void 0,void 0,(function(){return n(this,(function(t){return navigator.clipboard&&navigator.clipboard.writeText?(s("Using `navigator.clipboard.writeText()`."),[2,navigator.clipboard.writeText(e)]):[2,h(T(e))]}))}))}function m(){return t(this,void 0,void 0,(function(){var e;return n(this,(function(t){switch(t.label){case 0:return e=T,[4,g()];case 1:return[2,e.apply(void 0,[t.sent()])]}}))}))}function g(){return t(this,void 0,void 0,(function(){return n(this,(function(e){if(navigator.clipboard&&navigator.clipboard.readText)return s("Using `navigator.clipboard.readText()`."),[2,navigator.clipboard.readText()];if(I())return s("Reading text using IE strategy."),[2,C()];throw new Error("Read is not supported in your browser.")}))}))}var b=!1;function v(){b||(u&&c('The deprecated default object of `clipboard-polyfill` was called. Please switch to `import * as clipboard from "clipboard-polyfill"` and see https://github.com/lgarron/clipboard-polyfill/issues/101 for more info.'),b=!0)}var y={DT:a,setDebugLog:function(e){return v(),d(e)},suppressWarnings:function(){return v(),f()},write:function(e){return t(this,void 0,void 0,(function(){return n(this,(function(t){return v(),[2,h(e)]}))}))},writeText:function(e){return t(this,void 0,void 0,(function(){return n(this,(function(t){return v(),[2,p(e)]}))}))},read:function(){return t(this,void 0,void 0,(function(){return n(this,(function(e){return v(),[2,m()]}))}))},readText:function(){return t(this,void 0,void 0,(function(){return n(this,(function(e){return v(),[2,g()]}))}))}},w=function(){this.success=!1};function x(e){var t=new w,n=function(e,t,n){s("listener called"),e.success=!0,t.forEach((function(t,o){var r=n.clipboardData;r.setData(o,t),o===l&&r.getData(o)!==t&&(s("setting text/plain failed"),e.success=!1)})),n.preventDefault()}.bind(this,t,e);document.addEventListener("copy",n);try{document.execCommand("copy")}finally{document.removeEventListener("copy",n)}return t.success}function _(e,t){k(e);var n=x(t);return E(),n}function k(e){var t=document.getSelection();if(t){var n=document.createRange();n.selectNodeContents(e),t.removeAllRanges(),t.addRange(n)}}function E(){var e=document.getSelection();e&&e.removeAllRanges()}function T(e){var t=new a;return t.setData(l,e),t}function I(){return"undefined"==typeof ClipboardEvent&&void 0!==window.clipboardData&&void 0!==window.clipboardData.setData}function C(){return t(this,void 0,void 0,(function(){var e;return n(this,(function(t){if(""===(e=window.clipboardData.getData("Text")))throw new Error("Empty clipboard or could not read plain text from clipboard");return[2,e]}))}))}e.DT=a,e.default=y,e.read=m,e.readText=g,e.setDebugLog=d,e.suppressWarnings=f,e.write=h,e.writeText=p,Object.defineProperty(e,"__esModule",{value:!0})}(t)}).call(this,n(8).setImmediate,n(0))},function(e,t,n){(function(e){var o=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(r.call(setTimeout,o,arguments),clearTimeout)},t.setInterval=function(){return new i(r.call(setInterval,o,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(o,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(9),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(0))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var o,r,i,a,s,u=1,c={},l=!1,d=e.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(e);f=f&&f.setTimeout?f:e,"[object process]"==={}.toString.call(e.process)?o=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){p(e.data)},o=function(e){i.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(r=d.documentElement,o=function(e){var t=d.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):o=function(e){setTimeout(p,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),o=function(t){e.postMessage(a+t,"*")}),f.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return c[u]=r,o(u),u++},f.clearImmediate=h}function h(e){delete c[e]}function p(e){if(l)setTimeout(p,0,e);else{var t=c[e];if(t){l=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{h(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(0),n(10))},function(e,t){var n,o,r=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{o="function"==typeof clearTimeout?clearTimeout:a}catch(e){o=a}}();var u,c=[],l=!1,d=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):d=-1,c.length&&h())}function h(){if(!l){var e=s(f);l=!0;for(var t=c.length;t;){for(u=c,c=[];++d<t;)u&&u[d].run();d=-1,t=c.length}u=null,l=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new p(e,t)),1!==c.length||l||s(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t);n(2);var o=n(1),r=n.n(o);function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var s=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=n.shapeElemId,r=void 0===o?"shape":o,a=n.generatorElemId,s=void 0===a?"code":a,u=n.copyCodeId,c=void 0===u?"copy":u,l=n.copiedCodeId,d=void 0===l?"clipboard_copied":l,f=n.boxContainerId,h=void 0===f?"box":f,p=n.widthInputId,m=void 0===p?"width":p,g=n.heightInputId,b=void 0===g?"height":g,v=n.enableAdvancedId,y=void 0===v?"enable-advanced":v,w=n.initState,x=void 0===w?null:w,_=n.moveableElems;i(this,e),this.generatorElem=document.getElementById(s),this.shapeElem=document.getElementById(r),this.copiedCode=document.getElementById(d),this.boxContainer=document.getElementById(h),this.widthInput=document.getElementById(m),this.heightInput=document.getElementById(b),this.widthInput.onchange=function(){t.updateState(t.widthInput.value,"width")},this.heightInput.onchange=function(){t.updateState(t.heightInput.value,"height")},this.enableAdvanced=document.getElementById(y),this.enableAdvanced.onclick=this.enableAdvancedOnClick.bind(this),this.initState(x),this.initAdvanced(),this.handles=this.initHandles(_),document.getElementById(c).onclick=this.setClipboard.bind(this)}var t,n,o;return t=e,o=[{key:"loadUrlParams",value:function(e){var t,n=/#(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100)-(?:(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100))?-(\d*).(\d*)/gm,o=["left","top","right","bottom","leftBottom","topRight","rightBottom","bottomRight","height","width"],r={};if(!n.test(e))return null;for(n.lastIndex=0;null!==(t=n.exec(e));)t.forEach((function(e,t){0!=t&&(r[o[t-1]]=e)}));return r}}],(n=[{key:"initHandles",value:function(e){throw new Error("You have to implement the method initHandles!")}},{key:"updateBorderRadius",value:function(){throw new Error("You have to implement the method updateBorderRadius!")}},{key:"initState",value:function(e){throw new Error("You have to implement the method initState!")}},{key:"initAdvanced",value:function(){""!==this.state.width&&""!==this.state.height&&(this.enableAdvanced.checked=!0,document.getElementById("dimension-input").classList.add("visible"))}},{key:"enableAdvancedOnClick",value:function(e){this.enableAdvanced.checked?(document.getElementById("dimension-input").classList.add("visible"),this.state.width=this.boxContainer.offsetWidth,this.state.height=this.boxContainer.offsetHeight,this.updateUI()):(document.getElementById("dimension-input").classList.remove("visible"),this.updateState("","width"),this.updateState("","height"),this.boxContainer.style.height="",this.boxContainer.style.width="")}},{key:"setClipboard",value:function(){var e=this;r.a.writeText(this.generatorElem.innerHTML).then((function(){e.copiedCode.innerHTML='<div class="alert">Copied to clipboard 👍</div>'}),(function(){e.copiedCode.innerHTML='<div class="alert">💔 Not Supported</div>'})),setTimeout((function(){e.copiedCode.innerHTML=""}),2e3)}},{key:"setUrlHash",value:function(e){window.history&&"pushState"in window.history?history.pushState(null,null,"#"+e):window.location.hash=e}},{key:"updateState",value:function(e,t){this.state[t]=e,this.updateUI()}},{key:"updateUI",value:function(){this.updateBorderRadius(),this.updateBox()}},{key:"updateBox",value:function(){if(this.enableAdvanced.checked){var e=""==this.state.height?"":this.state.height+"px",t=""==this.state.width?"":this.state.width+"px";this.boxContainer.style.height=e,this.boxContainer.style.width=t,this.heightInput.value=this.state.height,this.widthInput.value=this.state.width}}},{key:"saveUrlParams",value:function(){throw new Error("You have to implement the method saveUrlParams!")}}])&&a(t.prototype,n),o&&a(t,o),e}();function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var l=function(){function e(t,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"x",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:30,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){};u(this,e),this.axis=o,this.pos=r,this.elem=t,this.onChange=n,this.onDragEnd=i,this.elem.onmousedown=this.dragMouseDown.bind(this),this.elem.ontouchstart=this.dragMouseDown.bind(this),this.setInitPos(r),this.onChange(this.pos,this.elem.id)}var t,n,o;return t=e,(n=[{key:"dragMouseDown",value:function(e){(e=e||window.event).preventDefault(),this.currentSpan=e.target,this.currentSpan.classList.add("active"),document.onmouseup=this.closeDragElement.bind(this),document.ontouchend=this.closeDragElement.bind(this),document.onmousemove=this.elementDrag.bind(this),document.ontouchmove=this.elementDrag.bind(this)}},{key:"elementDrag",value:function(e){if(e=e||window.event,"undefined"!=typeof TouchEvent&&e instanceof TouchEvent){var t=e.changedTouches[0];this.setPos(t.clientX,t.clientY)}else this.setPos(e.clientX,e.clientY)}},{key:"setInitPos",value:function(e){"x"==this.axis?this.elem.style.left=e+"%":this.elem.style.top=e+"%"}},{key:"setPos",value:function(e,t){var n=this.elem.parentNode.getBoundingClientRect();"x"==this.axis?(this.pos=this.valBetween((100*(e-5-n.left).toFixed(0)/n.width).toFixed(0),0,100),this.elem.style.left=this.pos+"%"):(this.pos=this.valBetween((100*(t-5-n.top).toFixed(0)/n.height).toFixed(0),0,100),this.elem.style.top=this.pos+"%"),this.onChange(this.pos,this.elem.id)}},{key:"closeDragElement",value:function(){this.currentSpan.classList.remove("active"),this.onDragEnd(),document.onmouseup=null,document.onmousemove=null,document.ontouchend=null,document.ontouchmove=null}},{key:"valBetween",value:function(e,t,n){return Math.min(n,Math.max(t,e))}}])&&c(t.prototype,n),o&&c(t,o),e}();function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function p(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(a,e);var t,n,o,r,i=(t=a,function(){var e,n=g(t);if(m()){var o=g(this).constructor;e=Reflect.construct(n,arguments,o)}else e=n.apply(this,arguments);return p(this,e)});function a(){return f(this,a),i.apply(this,arguments)}return n=a,(o=[{key:"initState",value:function(e){this.state=null==e?{left:30,right:30,top:30,bottom:30,width:"",height:"",advancedMode:!1}:e}},{key:"initHandles",value:function(e){return{left:new l(e.left,this.updateState.bind(this),"y",this.state.left,this.saveUrlParams.bind(this)),right:new l(e.right,this.updateState.bind(this),"y",this.state.right,this.saveUrlParams.bind(this)),top:new l(e.top,this.updateState.bind(this),"x",this.state.top,this.saveUrlParams.bind(this)),bottom:new l(e.bottom,this.updateState.bind(this),"x",this.state.bottom,this.saveUrlParams.bind(this))}}},{key:"updateBorderRadius",value:function(){var e=this.state.top+"% ";e+=100-this.state.top+"% ",e+=100-this.state.bottom+"% ",e+=this.state.bottom+"% / ",e+=this.state.left+"% ",e+=this.state.right+"% ",e+=100-this.state.right+"% ",e+=100-this.state.left+"% ",this.shapeElem.style["border-radius"]=e,this.generatorElem.innerHTML=e}},{key:"saveUrlParams",value:function(){var e=this.state,t=e.left,n=e.top,o=e.right,r=e.bottom,i=e.width,a=e.height,s="".concat(t,".").concat(n,".").concat(o,".").concat(r,"--").concat(a,".").concat(i);this.setUrlHash(s)}}])&&h(n.prototype,o),r&&h(n,r),a}(s),y={left:document.getElementById("left"),right:document.getElementById("right"),bottom:document.getElementById("bottom"),top:document.getElementById("top")},w=v.loadUrlParams(window.location.href);new v({moveableElems:y,initState:w})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,